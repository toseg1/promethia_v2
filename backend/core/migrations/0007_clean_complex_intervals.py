# Generated by Django 5.2.5 on 2025-10-03 06:41

from django.db import migrations


def clean_complex_intervals(apps, schema_editor):
    """
    Clean up training_data for intervals that have sub_intervals.
    Remove parent-level type, duration_or_distance, unit fields when sub_intervals exist.
    """
    Training = apps.get_model('core', 'Training')

    updated_count = 0
    cleaned_intervals_count = 0

    for training in Training.objects.all():
        if not training.training_data:
            continue

        intervals = training.training_data.get('intervals', [])
        needs_update = False

        for interval in intervals:
            if 'sub_intervals' not in interval or not interval['sub_intervals']:
                # Simple interval - no action needed
                continue

            # Has sub-intervals - check for parent-level fields that should be removed
            fields_to_remove = []
            for field in ['type', 'duration_or_distance', 'unit', 'intensity', 'zone_type']:
                if field in interval:
                    fields_to_remove.append(field)
                    needs_update = True

            # Remove forbidden parent fields
            for field in fields_to_remove:
                del interval[field]

            if fields_to_remove:
                cleaned_intervals_count += 1
                print(f'  Cleaned interval "{interval.get("name", "Unnamed")}" - removed fields: {fields_to_remove}')

        if needs_update:
            training.save()
            updated_count += 1

    print(f'\n✅ Migration complete:')
    print(f'   - Updated {updated_count} training session(s)')
    print(f'   - Cleaned {cleaned_intervals_count} complex interval(s)')


def reverse_clean(apps, schema_editor):
    """
    Reverse migration is not implemented as we cannot reliably restore deleted data.
    """
    print('⚠️  Reverse migration not available - parent interval data cannot be restored.')
    print('   This is a data cleanup migration that removes invalid fields.')


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0006_alter_customevent_date_end"),
    ]

    operations = [
        migrations.RunPython(clean_complex_intervals, reverse_clean),
    ]
