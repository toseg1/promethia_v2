# Generated by Django 5.2.5 on 2025-08-28 17:02

from django.db import migrations
import json


def convert_sports_to_json_format(apps, schema_editor):
    AthleticProfile = apps.get_model('accounts', 'AthleticProfile')
    db_alias = schema_editor.connection.alias
    
    for profile in AthleticProfile.objects.using(db_alias).all():
        if profile.sports_involved:
            # Convert string to list format that will work with JSONField
            if isinstance(profile.sports_involved, str):
                # Update the profile directly using Django ORM
                AthleticProfile.objects.using(db_alias).filter(id=profile.id).update(
                    sports_involved=json.dumps([profile.sports_involved])
                )
        else:
            # Set empty sport to empty list
            AthleticProfile.objects.using(db_alias).filter(id=profile.id).update(
                sports_involved=json.dumps([])
            )


def reverse_sports_to_string(apps, schema_editor):
    AthleticProfile = apps.get_model('accounts', 'AthleticProfile')
    db_alias = schema_editor.connection.alias
    
    for profile in AthleticProfile.objects.using(db_alias).all():
        if profile.sports_involved:
            try:
                sports_list = json.loads(profile.sports_involved)
                if sports_list and len(sports_list) > 0:
                    # Convert back to first item for CharField
                    AthleticProfile.objects.using(db_alias).filter(id=profile.id).update(
                        sports_involved=sports_list[0]
                    )
                else:
                    # Set to empty string
                    AthleticProfile.objects.using(db_alias).filter(id=profile.id).update(
                        sports_involved=''
                    )
            except json.JSONDecodeError:
                pass


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0010_alter_athleticprofile_experience_years_and_more"),
    ]

    operations = [
        migrations.RunPython(convert_sports_to_json_format, reverse_sports_to_string),
    ]
